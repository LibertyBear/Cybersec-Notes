HTB "Secret" brief writeup

The machine hosts a server featuring its own custom API. It's available for download. 

Once downloaded, you can inspect the API. 
Following the API instructions, you can use the cURL command to use the POST method and create a user in the site.
Login in grants an auth-token, which you can use to log in without a password. 
You can edit the auth-token in jwt.io, but it requires a secret base64 encrypted API token. if you view the source code, the SECRET_TOKEN is called "secret", however this is not valid. If you take a look at git commit log, you see the actual SECRET_KEY was removed for "security reasons", however, one can still view it in the commit log. 

Now we can modify the auth-token and get that of the admin. 

once we login as admin, we can get a reverse shell by hosting an ssh session

upon login in, we can easily get the user flag

to get the root flag, we can exploit a program called "count", which returns the amount of characters in a given txt file.
we can make it count /root/root.txt, for example. 
if we do, it'll return the number of characters in the root.txt file. 
However, if we hit CTRL-Z right after the program opens the root.txt file, then view the process with "ps" and kill it, and log the crash report:

apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-report

we can then view this output: strings /tmp/crash-report/CoreDump

and somewhere in the mumbo-jumbo is the the root flag. 

Takeaways: 
-mostly just using the API and modifying the token
-crashing a program that opens the root.txt file and viewing the crash report is a fun idea
